{{ for component in $1.components }}
{{if !component.is_plural && component.by.segments == null }}
public {{get_component_return_type component}}.Conditions {{component.name}}
{
	get
	{
		var elementHandlerRepository = ElementHandlerRepository.CreateNestedRepository();

		if (elementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
		{
			return new {{get_component_return_type component}}.Conditions(Timeout, PollingInterval, WebDriver, ElementHandlerRepository, cachedElementHandler, ElementLocator, EventSource);
		}
		else
		{
			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = global::OpenQA.Selenium.By.XPath("{{ escape component.by.value }}");
			{{ else }}
			var by = global::OpenQA.Selenium.By.CssSelector("{{ escape component.by.value }}");
			{{ end -}}

			{{ else if component.by.method == 'XPath' -}}
			var by = global::OpenQA.Selenium.By.XPath("{{ escape component.by.value }}");

			{{ else if component.by.method == 'Css' -}}
			var by = global::OpenQA.Selenium.By.CssSelector("{{ escape component.by.value }}");

			{{ else if component.by.method == 'Id' -}}
			var by = global::OpenQA.Selenium.By.Id("{{ escape component.by.value }}");
			{{ end -}}

			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.name}}" };
			var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, ElementHandler, ElementLocator, by, metadata, EventSource);

			elementHandlerRepository.Set("{{component.name}}", elementHandler);

			return new {{get_component_return_type component}}.Conditions(Timeout, PollingInterval, WebDriver, elementHandlerRepository, elementHandler, ElementLocator, EventSource);
		}
	}
}
{{ end }}
{{ end }}