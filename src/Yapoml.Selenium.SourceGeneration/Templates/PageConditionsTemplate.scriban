[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class Conditions : global::Yapoml.Selenium.Components.BasePageConditions<Conditions>
{
	public Conditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandlerRepository elementHandlerRepository, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Components.Metadata.PageMetadata pageMetadata, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
		: base(timeout, pollingInterval, webDriver, elementHandlerRepository, elementLocator, pageMetadata, eventSource, logger)
	{
		base._self = this;
	}

	{{ if $1.url && $1.url.segments == null && $1.url.params == null }}
	/// <summary>
	/// Expect that current url contains <c>{{ $1.url.path }}</c>.
	///
	/// Evaluates document's state to be <c>complete</c> which means the page is fully loaded.
	/// It doesn't guarantee that some components on the page are present, they might be rendered dynamically.
	/// </summary>
	public override Conditions IsOpened(global::System.TimeSpan? timeout = default)
	{
		using (Logger.BeginLogScope("Expect the {{$1.name}} page is opened"))
		{
			Url.Contains("{{ $1.url.path }}", timeout);

			return base.IsOpened(timeout);
		}
	}
	{{ end }}

	{{ for component in $1.components }}
	{{if !component.is_plural && component.by.segments == null }}
	public {{get_component_return_type component}}.ChainConditions {{component.name}}
	{
		get
		{
			if (ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
			{
				return new {{get_component_return_type component}}.ChainConditions(Timeout, PollingInterval, WebDriver, cachedElementHandler, ElementLocator, EventSource, Logger);
			}
			else
			{
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}

				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, null, ElementLocator, by, metadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			
				ElementHandlerRepository.Set("{{component.name}}", elementHandler);

				return new {{get_component_return_type component}}.ChainConditions(Timeout, PollingInterval, WebDriver, elementHandler, ElementLocator, EventSource, Logger);
			}
		}
	}
	{{ else if component.is_plural && component.by.segments == null }}
	public {{get_component_return_type component}}List.Conditions {{component.name}}
	{
		get
		{
			var byValue = "{{ escape component.by.value }}";

			{{ include 'ByTemplate' component }}
				
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, null, ElementLocator, by, listMetadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			
			return new {{component.singular_name}}ComponentList.Conditions(Timeout, PollingInterval, WebDriver, elementsListHandler, ElementLocator, EventSource, Logger);
		}
	}
	{{ end }}
	{{ end }}
}