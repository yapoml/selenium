[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class {{$1.singular_name}}Component : {{if $1.base_component}}global::{{$1.base_component.namespace}}.{{$1.base_component.name}}Component{{else}}{{if $1.page}}global::{{$1.page.namespace}}{{else if $1.space}}{{if $1.name == 'Base' }}{{if $1.space.parent_space}}global::{{$1.space.parent_space.namespace}}{{else}}global::Yapoml.Selenium.Components{{end}}{{else}}global::{{$1.space.namespace}}{{end}}{{else}}global::Yapoml.Selenium.Components{{end}}.BaseComponent{{end}}
{
	public {{$1.singular_name}}Component(global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Components.Metadata.ComponentMetadata metadata, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(webDriver, elementHandler, metadata, spaceOptions)
	{

	}

	public override global::OpenQA.Selenium.IWebElement WrappedElement
	{
		get
		{
			{{ include 'LineDirectiveTemplate' $1 }}
			return base.WrappedElement;
			#line default
		}
	}

	{{- for component in $1.components }}

	/// <summary>
	{{ include 'NestedComponentTemplate_Desc' component }}
	/// </summary>
	{{- if component.by.segments == null }}
	public {{ if component.is_plural }}global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
	{
		get
		{
			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = global::OpenQA.Selenium.By.XPath("{{ escape component.by.value }}");
			{{ else }}
			var by = global::OpenQA.Selenium.By.CssSelector("{{ escape component.by.value }}");
			{{ end -}}

			{{ else if component.by.method == 'XPath' -}}
			var by = global::OpenQA.Selenium.By.XPath("{{ escape component.by.value }}");

			{{ else if component.by.method == 'Css' -}}
			var by = global::OpenQA.Selenium.By.CssSelector("{{ escape component.by.value }}");

			{{ else if component.by.method == 'Id' -}}
			var by = global::OpenQA.Selenium.By.Id("{{ escape component.by.value }}");
			{{ end -}}
		
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.name}}" };
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
			var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, EventSource);

			{{- if component.is_plural }}
			var webElements = new global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>(WebDriver, elementHandler, metadata, EventSource, SpaceOptions);
			return webElements;
			{{ else }}
			return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, elementHandler, metadata, SpaceOptions);
			{{- end }}
		}
	}
	{{ else }}
	public {{ if component.is_plural }}global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
	{
		var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

		var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ escape component.by.value }}", segments);

		{{ if component.by.method == 'None' -}}
		{{ if is_xpath component.by.value }}
		var by = global::OpenQA.Selenium.By.XPath(byValue);
		{{ else }}
		var by = global::OpenQA.Selenium.By.CssSelector(byValue);
		{{ end -}}

		{{ else if component.by.method == 'XPath' -}}
		var by = global::OpenQA.Selenium.By.XPath(byValue);

		{{ else if component.by.method == 'Css' -}}
		var by = global::OpenQA.Selenium.By.CssSelector(byValue);

		{{ else if component.by.method == 'Id' -}}
		var by = global::OpenQA.Selenium.By.Id(byValue);
		{{ end -}}
		
		var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.name}}" };
		var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
		var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, EventSource);

		{{- if component.is_plural }}
		var webElements = new global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>(WebDriver, elementHandler, metadata, EventSource, SpaceOptions);
		return webElements;
		{{ else }}
		return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, elementHandler, metadata, SpaceOptions);
		{{- end }}
	}
	{{ end }}

	{{- if component.referenced_component == null }}
	{{ include 'NestedComponentTemplate' component }}
	{{ end }}
	{{ end }}

	{{ include 'NestedComponentTemplate_Actions' $1 }}

	/// <summary>
	/// Various awaitable conditions on the {{$1.name}} component.
	/// </summary>
	public {{$1.singular_name}}Component When(global::System.Action<Conditions> it)
	{
		var timeoutOptions = SpaceOptions.Services.Get<global::Yapoml.Selenium.Options.TimeoutOptions>();

		{{ include 'LineDirectiveTemplate' $1 }}
		it(new Conditions(_elementHandler, timeoutOptions));
		#line default

		return this;
	}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class Conditions : global::Yapoml.Selenium.Components.BaseComponentConditions<Conditions>
	{
		public Conditions(global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Options.TimeoutOptions timeoutOptions)
			: base(elementHandler, timeoutOptions.Timeout, timeoutOptions.PollingInterval)
		{
			base.obj = this;
		}


	}
}