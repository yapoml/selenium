[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class {{$1.singular_name}}Component : {{if $1.base_component}}global::{{$1.base_component.namespace}}.{{$1.base_component.name}}Component<{{$1.singular_name}}Component, {{$1.singular_name}}Component.ChainConditions, {{$1.singular_name}}Component.OneTimeConditions>{{else}}{{if $1.page}}global::{{$1.page.namespace}}{{else if $1.space}}{{if $1.name == 'Base' }}{{if $1.space.parent_space}}global::{{$1.space.parent_space.namespace}}{{else}}global::Yapoml.Selenium.Components{{end}}{{else}}global::{{$1.space.namespace}}{{end}}{{else}}global::Yapoml.Selenium.Components{{end}}.BaseComponent<{{$1.singular_name}}Component, {{$1.singular_name}}Component.ChainConditions, {{$1.singular_name}}Component.OneTimeConditions>{{end}}
{
	public {{$1.singular_name}}Component(global::Yapoml.Selenium.Components.BasePage page, global::Yapoml.Selenium.Components.BaseComponent parentComponent, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Components.Metadata.ComponentMetadata metadata, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(page, parentComponent, webDriver, elementHandler, metadata, spaceOptions)
	{
		base.component = this;
		var timeoutOptions = SpaceOptions.Services.Get<global::Yapoml.Selenium.Options.TimeoutOptions>();
		var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
		base.conditions = new ChainConditions(timeoutOptions.Timeout, timeoutOptions.PollingInterval, webDriver, elementHandler, elementLocator, EventSource, _logger);
		base.oneTimeConditions = new OneTimeConditions(this, timeoutOptions.Timeout, timeoutOptions.PollingInterval, webDriver, elementHandler, elementLocator, EventSource, _logger);
	}

	protected override global::OpenQA.Selenium.IWebElement WrappedElement
	{
		get
		{
			{{ include 'LineDirectiveTemplate' $1 }}
			return base.WrappedElement;
			#line default
		}
	}

	{{- for component in $1.components }}

	/// <summary>
	{{ include 'NestedComponentTemplate_Desc' component }}
	/// </summary>
	{{- if component.by.segments == null }}
	public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
	{
		get
		{
			{{ if component.is_plural }}
			var byValue = "{{ escape component.by.value }}";

			{{ include 'ByTemplate' component }}
			
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
			var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, _elementHandler, elementLocator, by, listMetadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

			var webElements = new {{component.singular_name}}ComponentList(Page, this, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
			return webElements;
			{{ else }}
			if (_elementHandler.ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
			{
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.ChainConditions, {{get_component_return_type component}}.OneTimeConditions>(Page, this, WebDriver, cachedElementHandler, metadata, SpaceOptions);
			}
			else
			{
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}
				
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
				var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

				_elementHandler.ElementHandlerRepository.Set("{{component.name}}", elementHandler);

				return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.ChainConditions, {{get_component_return_type component}}.OneTimeConditions>(Page, this, WebDriver, elementHandler, metadata, SpaceOptions);
			}
			{{- end }}
		}
	}
	{{ else }}
	public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
	{
		var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

		var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ escape component.by.value }}", segments);

		{{ include 'ByTemplate' component }}
		
		var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();

		{{- if component.is_plural }}
		var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
		var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
		var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, _elementHandler, elementLocator, by, listMetadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
		var webElements = new {{component.singular_name}}ComponentList(Page, this, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
		return webElements;
		{{ else }}
		var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
		var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
		return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.ChainConditions, {{get_component_return_type component}}.OneTimeConditions>(Page, this, WebDriver, elementHandler, metadata, SpaceOptions);
		{{- end }}
	}
	{{ end }}

	{{ include 'NestedComponentTemplate' component }}

	{{ end }}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public abstract partial class Conditions<TSelf> : BaseComponent<{{$1.singular_name}}Component, ChainConditions, OneTimeConditions>.Conditions<TSelf>
	{
		public Conditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
			: base(timeout, pollingInterval, webDriver, elementHandler, elementLocator, eventSource, logger)
		{
			
		}
	}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public class ChainConditions : Conditions<ChainConditions>
	{
		public ChainConditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
			: base(timeout, pollingInterval, webDriver, elementHandler, elementLocator, eventSource, logger)
		{
			base._self = this;
		}

		{{ include 'NestedComponentConditionsTemplate' $1 }}
	}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public class OneTimeConditions : Conditions<{{$1.singular_name}}Component>
	{
		public OneTimeConditions({{$1.singular_name}}Component self, global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
			: base(timeout, pollingInterval, webDriver, elementHandler, elementLocator, eventSource, logger)
		{
			base._self = self;
		}

		{{ include 'NestedComponentOneTimeConditionsTemplate' $1 }}
	}

	#region sibling components
	{{ if $1.page != null }}
	{{ if $1.components == null || $1.components.length == 0 }}
	{{ if $1.parent_component != null && $1.base_component == null }}
	{{- for component in $1.parent_component.components }}
		/// <summary>
		{{ include 'NestedComponentTemplate_Desc' component }}
		/// </summary>
		{{- if component.by.segments == null }}
		public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}
		{
			get
			{
				return (({{get_component_return_full_type $1.parent_component}})parentComponent).{{component.name}};
			}
		}
		{{ else }}
		public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
		{
			return (({{get_component_return_full_type $1.parent_component}})parentComponent).{{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}{{ segment }}{{ end }});
		}
	{{ end }}
	{{ end }}
	{{ else }}

	{{ end }}
	{{ end }}
	{{ end }}
	#endregion

	{{ if $1.page != null }}
	/// <summary>
	/// Enables continuation of accessing parent components.
	/// </summary>
	public AndContinuation And => new AndContinuation(Page, parentComponent);

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class AndContinuation
	{
		private global::{{$1.page.namespace}}.{{get_page_class_name_for_page $1.page}} _page;
		{{ if $1.parent_component != null }}
		private {{ get_component_return_full_type $1.parent_component }} _component;
		{{ else }}
		private global::Yapoml.Selenium.Components.BaseComponent _component;
		{{ end }}

		public AndContinuation(global::Yapoml.Selenium.Components.BasePage page, global::Yapoml.Selenium.Components.BaseComponent component)
		{
			_page = (global::{{$1.page.namespace}}.{{get_page_class_name_for_page $1.page}})page;
			{{ if $1.parent_component != null }}
			_component = ({{ get_component_return_full_type $1.parent_component }})component;
			{{ else }}
			_component = component;
			{{ end }}
		}

		{{ if $1.parent_component != null }}
			{{- for component in $1.parent_component.components }}
		
			/// <summary>
			{{ include 'NestedComponentTemplate_Desc' component }}
			/// </summary>
			{{- if component.by.segments == null }}
			public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}
				=> _component.{{component.name}};
			{{ else }}
			public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
				=> _component.{{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}{{ segment }}{{ end }});
			{{ end }}
			{{ end }}
		{{ else }}
			{{- for component in $1.page.components }}
		
			/// <summary>
			{{ include 'NestedComponentTemplate_Desc' component }}
			/// </summary>
			{{- if component.by.segments == null }}
			public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}
				=> _page.{{component.name}};
			{{ else }}
			public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_full_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
				=> _page.{{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}{{ segment }}{{ end }});
			{{ end }}
			{{ end }}
		{{ end }}
	}

	{{ end }}
}

{{ if $1.is_plural -}}
[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class {{$1.singular_name}}ComponentList : global::Yapoml.Selenium.Components.BaseComponentList<{{$1.singular_name}}Component, {{$1.singular_name}}ComponentList.Conditions, {{$1.singular_name}}Component.ChainConditions>
{
	private OneTimeConditions oneTimeConditions;

	public {{$1.singular_name}}ComponentList(global::Yapoml.Selenium.Components.BasePage page, global::Yapoml.Selenium.Components.BaseComponent parentComponent, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementsListHandler elementsListHandler, global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata componentsListMetadata, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(page, parentComponent, webDriver, elementsListHandler, componentsListMetadata, eventSource, spaceOptions)
	{
		var timeoutOptions = spaceOptions.Services.Get<global::Yapoml.Selenium.Options.TimeoutOptions>();
		var elementLocator = spaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
		base.listConditions = new Conditions(timeoutOptions.Timeout, timeoutOptions.PollingInterval, webDriver, elementsListHandler, elementLocator, eventSource, _logger);
		oneTimeConditions = new OneTimeConditions(this, timeoutOptions.Timeout, timeoutOptions.PollingInterval, webDriver, elementsListHandler, elementLocator, eventSource, _logger);
	}

	/// <summary>
    /// Various awaitable conditions on the list of components.
    /// </summary>
    public OneTimeConditions Expect()
    {
        return oneTimeConditions;
    }

	/// <summary>
    /// Various awaitable conditions on the list of components.
    /// </summary>
    public {{$1.singular_name}}ComponentList Expect(global::System.Action<Conditions> it)
    {
        using (_logger.BeginLogScope($"Expect {_elementsListHandler.ComponentsListMetadata.Name} satisfy conditions"))
        {
            it(listConditions);
        }

        return this;
    }

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class Conditions : global::Yapoml.Selenium.Components.BaseComponentListConditions<Conditions, {{$1.singular_name}}Component.ChainConditions>
	{
		public Conditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementsListHandler elementsListHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
			: base(timeout, pollingInterval, webDriver, elementsListHandler, elementLocator, eventSource, logger)
		{
			base._self = this;
		}
	}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public class OneTimeConditions : global::Yapoml.Selenium.Components.BaseComponentListConditions<{{$1.singular_name}}ComponentList, {{$1.singular_name}}Component.ChainConditions>
	{
		public OneTimeConditions({{$1.singular_name}}ComponentList self, global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementsListHandler elementsListHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger)
			: base(timeout, pollingInterval, webDriver, elementsListHandler, elementLocator, eventSource, logger)
		{
			base._self = self;
		}
	}
}
{{ end -}}