[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class {{$1.singular_name}}Component : {{if $1.base_component}}global::{{$1.base_component.namespace}}.{{$1.base_component.name}}Component<{{$1.singular_name}}Component, {{$1.singular_name}}Component.Conditions>{{else}}{{if $1.page}}global::{{$1.page.namespace}}{{else if $1.space}}{{if $1.name == 'Base' }}{{if $1.space.parent_space}}global::{{$1.space.parent_space.namespace}}{{else}}global::Yapoml.Selenium.Components{{end}}{{else}}global::{{$1.space.namespace}}{{end}}{{else}}global::Yapoml.Selenium.Components{{end}}.BaseComponent<{{$1.singular_name}}Component, {{$1.singular_name}}Component.Conditions>{{end}}
{
	public {{$1.singular_name}}Component(global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Components.Metadata.ComponentMetadata metadata, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(webDriver, elementHandler, metadata, spaceOptions)
	{
		base.component = this;
		var timeoutOptions = SpaceOptions.Services.Get<global::Yapoml.Selenium.Options.TimeoutOptions>();
		var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
		base.conditions = new Conditions(timeoutOptions.Timeout, timeoutOptions.PollingInterval, webDriver, elementHandler, elementLocator, EventSource);
	}

	public override global::OpenQA.Selenium.IWebElement WrappedElement
	{
		get
		{
			{{ include 'LineDirectiveTemplate' $1 }}
			return base.WrappedElement;
			#line default
		}
	}

	{{- for component in $1.components }}

	/// <summary>
	{{ include 'NestedComponentTemplate_Desc' component }}
	/// </summary>
	{{- if component.by.segments == null }}
	public {{ if component.is_plural }}global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
	{
		get
		{
			{{ if component.is_plural }}
			var byValue = "{{ escape component.by.value }}";

			{{ include 'ByTemplate' component }}
			
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
			var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

			var webElements = new global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(WebDriver, elementHandler, listMetadata, EventSource, SpaceOptions);
			return webElements;
			{{ else }}
			if (_elementHandler.ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
			{
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(WebDriver, cachedElementHandler, metadata, SpaceOptions);
			}
			else
			{
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}
				
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
				var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

				_elementHandler.ElementHandlerRepository.Set("{{component.name}}", elementHandler);

				return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(WebDriver, elementHandler, metadata, SpaceOptions);
			}
			{{- end }}
		}
	}
	{{ else }}
	public {{ if component.is_plural }}global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
	{
		var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

		var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ escape component.by.value }}", segments);

		{{ include 'ByTemplate' component }}
		
		var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();

		{{- if component.is_plural }}
		var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
		var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
		var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
		var webElements = new global::Yapoml.Selenium.Components.BaseComponentList<{{get_component_return_type component}}>(WebDriver, elementHandler, listMetadata, EventSource, SpaceOptions);
		return webElements;
		{{ else }}
		var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
		var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
		return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(WebDriver, elementHandler, metadata, SpaceOptions);
		{{- end }}
	}
	{{ end }}


	{{ include 'NestedComponentTemplate' component }}

	{{ end }}

	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class Conditions : global::Yapoml.Selenium.Components.BaseComponentConditions<Conditions>
	{
		public Conditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Services.Locator.IElementLocator elementLocator, global::Yapoml.Selenium.Events.IEventSource eventSource)
			: base(timeout, pollingInterval, webDriver, elementHandler, elementLocator, eventSource)
		{
			base.conditions = this;
		}

		{{ include 'NestedComponentConditionsTemplate' $1 }}
	}
}