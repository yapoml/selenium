partial void OnClick();

/// <summary>
/// Simulates a mouse click on an element.
/// </summary>
public new {{$1.singular_name}}Component Click()
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnClick")) { OnClick(); } else { base.Click(); }

	return this;
}

partial void OnHover();

/// <summary>
/// Moves the cursor onto the element or one of its child elements.
/// </summary>
public new {{$1.singular_name}}Component Hover()
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnHover")) { OnHover(); } else { base.Hover(); }

	return this;
}

partial void OnHover(int x, int y);

/// <summary>
/// Moves the cursor onto the element or one of its child elements.
/// </summary>
public new {{$1.singular_name}}Component Hover(int x, int y)
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnHover", x, y)) { OnHover(x, y); } else { base.Hover(x, y); }

	return this;
}

partial void OnScrollIntoView();

/// <summary>
/// Scrolls the element's ancestor containers is visible to the user.
/// </summary>
public new {{$1.singular_name}}Component ScrollIntoView()
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnScrollIntoView")) { OnScrollIntoView(); } else { base.ScrollIntoView(); }

	return this;
}

partial void OnScrollIntoView(global::Yapoml.Selenium.Options.ScrollIntoViewOptions options);

/// <summary>
/// Scrolls the element's ancestor containers is visible to the user.
/// </summary>
public new {{$1.singular_name}}Component ScrollIntoView(global::Yapoml.Selenium.Options.ScrollIntoViewOptions options)
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnScrollIntoView", options)) { OnScrollIntoView(options); } else { base.ScrollIntoView(options); }

	return this;
}

partial void OnFocus();

/// Sets focus on the specified element, if it can be focused.
/// The focused element is the element that will receive keyboard and similar events by default.
/// </summary>
public new {{$1.singular_name}}Component Focus()
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnFocus")) { OnFocus(); } else { base.Focus(); }

	return this;
}

partial void OnFocus(global::Yapoml.Selenium.Options.FocusOptions options);

/// <summary>
/// Sets focus on the specified element, if it can be focused.
/// The focused element is the element that will receive keyboard and similar events by default.
/// </summary>
public new {{$1.singular_name}}Component Focus(global::Yapoml.Selenium.Options.FocusOptions options)
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnFocus", options)) { OnFocus(options); } else { base.Focus(options); }

	return this;
}

partial void OnBlur();

/// <summary>
/// Removes keyboard focus from the element.
/// </summary>
public new {{$1.singular_name}}Component Blur()
{
	if (HasImplementation<{{$1.singular_name}}Component>("OnBlur")) { OnBlur(); } else { base.Blur(); }

	return this;
}