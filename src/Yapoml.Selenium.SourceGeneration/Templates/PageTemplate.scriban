# pragma warning disable
using global::System.Linq;

namespace {{namespace}}
{
	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class {{ get_page_class_name this }} : {{ if base_page }}global::{{ base_page.namespace }}.{{ get_page_class_name_for_page base_page }}{{else}}{{if (get_page_class_name this) == 'BasePage'}}{{if parent_space.parent_space}}global::{{parent_space.parent_space.namespace}}.BasePage{{else}}global::Yapoml.Selenium.Components.BasePage{{end}}{{else}}{{if parent_space}}global::{{parent_space.namespace}}.BasePage{{else}}global::Yapoml.Selenium.Components.BasePage{{end}}{{end}}{{end}}
	{
		public {{ get_page_class_name this }}(global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandlerRepository elementHandlerRepository, global::Yapoml.Selenium.Components.Metadata.PageMetadata metadata, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
			: base(webDriver, elementHandlerRepository, metadata, spaceOptions)
		{

		}

		{{- if url }}

		/// <summary>
		/// Navigates to <c>{{ url.path }}</c>
		/// </summary>
		public {{ get_page_class_name this }} Open(
		{{- for segment in url.segments }}{{ if for.first == false }}, {{ end }}string {{ segment }}{{ end }}
		{{- for param in url.params }} {{ if url.segments && for.first }}, {{ end }}{{ if for.first == false }}, {{ end }}string {{ param }} = null{{ end }})
		{
			var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for segment in url.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end -}} 
			};

			var queryParams = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for param in url.params }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ param }}", {{ param }}) {{ end -}} 
			};

			var navService = new global::Yapoml.Selenium.Services.NavigationService(SpaceOptions);

			var url = navService.BuildUri("{{ url.path }}", segments, queryParams);

			EventSource.PageEventSource.RaiseOnPageNavigating(this, url, Metadata);

			using (_logger.BeginLogScope($"Opening {Metadata.Name} page by {url}"))
			{
				WebDriver.Navigate().GoToUrl(url);
			}
			return this;
		}
		{{ end }}

		{{- for component in components }}

		/// <summary>
		{{ include 'NestedComponentTemplate_Desc' component }}
		/// </summary>
		{{- if component.by.segments == null }}
		public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
		{
			get
			{
				{{ if component.is_plural }}
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}
				
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
				var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
				var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
				var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, null, elementLocator, by, listMetadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
				
				var webElements = new {{component.singular_name}}ComponentList(this, null, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
				return webElements;
				{{- else -}}
				if (ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
				{
					var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
					return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(this, null, WebDriver, cachedElementHandler, metadata, SpaceOptions);
				}
				else
				{
					var byValue = "{{ escape component.by.value }}";

					{{ include 'ByTemplate' component }}

					var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
					var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
					var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, null, elementLocator, by, metadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
				
					ElementHandlerRepository.Set("{{component.name}}", elementHandler);

					return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(this, null, WebDriver, elementHandler, metadata, SpaceOptions);
				}
				{{- end}}
			}
		}
		{{ else }}
		public {{ if component.is_plural }}{{component.singular_name}}ComponentList{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
		{
			var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

			var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ escape component.by.value }}", segments);

			{{ include 'ByTemplate' component }}
		
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();

			{{- if component.is_plural -}}
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, null, elementLocator, by, listMetadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			var webElements = new {{component.singular_name}}ComponentList(this, null, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
			return webElements;
			{{ else }}
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
			var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, null, elementLocator, by, metadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(this, null, WebDriver, elementHandler, metadata, SpaceOptions);
			{{- end }}
		}
		{{ end }}

		{{- if component.referenced_component == null }}
		{{ include 'NestedComponentTemplate' component }}
		{{ end }}
		{{ end }}

		/// <summary>
		/// Various awaitable conditions on the <c>{{name}}</c> page.
		/// </summary>
		/// <param name="it">Actionable conditions object, allowing you to specify multiple chainable conditions.</param>
		/// <returns>Self <c>{{name}}</c> page to continue interactions after conditions are satisfied.</returns>
		public {{ get_page_class_name this }} Expect(global::System.Action<{{ get_page_class_name this }}.Conditions> it)
		{
			var timeoutOptions = SpaceOptions.Services.Get<global::Yapoml.Selenium.Options.TimeoutOptions>();
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();

			it(new Conditions(timeoutOptions.Timeout, timeoutOptions.PollingInterval, WebDriver, ElementHandlerRepository, elementLocator, Metadata, EventSource, _logger));

			return this;
		}

		{{ include 'PageConditionsTemplate' this }}
	}
}
# pragma warning restore