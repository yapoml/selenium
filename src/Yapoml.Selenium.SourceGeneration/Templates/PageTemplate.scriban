# pragma warning disable
using global::System.Linq;

namespace {{namespace}}
{
	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public partial class {{ get_page_class_name this }} : {{ if base_page }}global::{{ base_page.namespace }}.{{ get_page_class_name_for_page base_page }}{{else}}{{if (get_page_class_name this) == 'BasePage'}}{{if parent_space.parent_space}}global::{{parent_space.parent_space.namespace}}.BasePage{{else}}global::Yapoml.Selenium.Components.BasePage{{end}}{{else}}global::{{parent_space.namespace}}.BasePage{{end}}{{end}}
	{
		public {{ get_page_class_name this }}(global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
			: base(webDriver, spaceOptions)
		{

		}

		{{- if url }}

		/// <summary>
		/// Navigates to <c>{{ url.path }}</c>
		/// </summary>
		public {{ get_page_class_name this }} Open(
		{{- for segment in url.segments }}{{ if for.first == false }}, {{ end }}string {{ segment }}{{ end }}
		{{- for param in url.params }} {{ if url.segments && for.first }}, {{ end }}{{ if for.first == false }}, {{ end }}string {{ param }} = null{{ end }})
		{
			var baseUrl = SpaceOptions.Services.Get<global::Yapoml.Selenium.Options.BaseUrlOptions>().Url;

			var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for segment in url.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end -}} 
			};

			var queryParams = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for param in url.params }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ param }}", {{ param }}) {{ end -}} 
			};

			var navService = new global::Yapoml.Selenium.Services.NavigationService(baseUrl);

			var url = navService.BuildUri("{{ url.path }}", segments, queryParams);

			PageEventSource.RaiseOnPageNavigating(this, url);

			WebDriver.Navigate().GoToUrl(url);

			return this;
		}
		{{ end }}

		{{- for component in components }}

		/// <summary>
		{{ include 'NestedComponentTemplate_Desc' component }}
		/// </summary>
		{{- if component.by.segments == null }}
		public {{ if component.is_plural }}global::System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
		{
			get
			{
				var byValue = "{{ component.by.value }}";

				{{ if component.by.method == 'None' -}}
				{{ if is_xpath component.by.value }}
				var by = global::OpenQA.Selenium.By.XPath(byValue);
				{{ else }}
				var by = global::OpenQA.Selenium.By.CssSelector(byValue);
				{{ end -}}

				{{ else if component.by.method == 'XPath' -}}
				var by = global::OpenQA.Selenium.By.XPath(byValue);

				{{ else if component.by.method == 'Css' -}}
				var by = global::OpenQA.Selenium.By.CssSelector(byValue);

				{{ else if component.by.method == 'Id' -}}
				var by = global::OpenQA.Selenium.By.Id(byValue);
				{{ end -}}
		
				{{- if component.is_plural }}
				ComponentEventSource.RaiseOnFindingComponents("{{component.name}}", by);
				{{ include 'LineDirectiveTemplate' component }}
				var webElements = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>().FindElements(WebDriver, by);
				#line default
				ComponentEventSource.RaiseOnFoundComponents(by, webElements);
				return webElements.Select(e => SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, e, SpaceOptions)).ToList();
				{{ else }}
				ComponentEventSource.RaiseOnFindingComponent("{{component.name}}", by);
				{{ include 'LineDirectiveTemplate' component }}
				var webElement = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>().FindElement("{{ component.name }}", WebDriver, by);
				#line default
				ComponentEventSource.RaiseOnFoundComponent(by, WebDriver, webElement);
				return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, webElement, SpaceOptions);
				{{- end}}
			}
		}
		{{ else }}
		public {{ if component.is_plural }}global::System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
		{
			var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

			var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ component.by.value }}", segments);

			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = global::OpenQA.Selenium.By.XPath(byValue);
			{{ else }}
			var by = global::OpenQA.Selenium.By.CssSelector(byValue);
			{{ end -}}

			{{ else if component.by.method == 'XPath' -}}
			var by = global::OpenQA.Selenium.By.XPath(byValue);

			{{ else if component.by.method == 'Css' -}}
			var by = global::OpenQA.Selenium.By.CssSelector(byValue);

			{{ else if component.by.method == 'Id' -}}
			var by = global::OpenQA.Selenium.By.Id(byValue);
			{{ end -}}
		
			{{- if component.is_plural -}}
			ComponentEventSource.RaiseOnFindingComponents("{{component.name}}", by);
			{{ include 'LineDirectiveTemplate' component }}
			var webElements = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>().FindElements(WebDriver, by);
			#line default
			ComponentEventSource.RaiseOnFoundComponents(by, webElements);
			return webElements.Select(e => SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, e, SpaceOptions)).ToList();
			{{ else }}
			ComponentEventSource.RaiseOnFindingComponent("{{component.name}}", by);
			{{ include 'LineDirectiveTemplate' component }}
			var webElement = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>().FindElement("{{ component.name }}", WebDriver, by);
			#line default
			ComponentEventSource.RaiseOnFoundComponent(by, WebDriver, webElement);
			return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, webElement, SpaceOptions);
			{{- end -}}
		}
		{{ end }}

		{{- if component.referenced_component == null }}
		{{ include 'NestedComponentTemplate' component }}
		{{ end }}
		{{ end }}

		{{- if (array.size components) > 0 }}
		{{ include 'WaiterTemplate' this "WebDriver"}}
		{{ end }}
	}
}
# pragma warning restore