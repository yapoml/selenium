# pragma warning disable
namespace {{namespace}}
{
	[global::System.Runtime.CompilerServices.CompilerGenerated]
	public abstract partial class {{singular_name}}Component<TComponent, TConditions> : {{if base_component}}global::{{base_component.namespace}}.{{base_component.name}}Component<TComponent, TConditions>{{else}}{{if page}}global::{{page.namespace}}{{else if space}}{{if name == 'Base' }}{{if space.parent_space}}global::{{space.parent_space.namespace}}{{else}}global::Yapoml.Selenium.Components{{end}}{{else}}global::{{space.namespace}}{{end}}{{else}}global::Yapoml.Selenium.Components{{end}}.BaseComponent<TComponent, TConditions>{{end}}
		where TComponent: global::Yapoml.Selenium.Components.BaseComponent<TComponent, TConditions>
		where TConditions: global::Yapoml.Selenium.Components.BaseComponentConditions<TConditions>
	{
		public {{singular_name}}Component(global::Yapoml.Selenium.Components.BasePage page, global::Yapoml.Selenium.Components.BaseComponent parentComponent, global::OpenQA.Selenium.IWebDriver webDriver, global::Yapoml.Selenium.Services.Locator.IElementHandler elementHandler, global::Yapoml.Selenium.Components.Metadata.ComponentMetadata metadata, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
			: base(page, parentComponent, webDriver, elementHandler, metadata, spaceOptions)
		{
		
		}

		public override global::OpenQA.Selenium.IWebElement WrappedElement
		{
			get
			{
				{{ include 'LineDirectiveTemplate' this }}
				return base.WrappedElement;
				#line default
			}
		}

		{{- for component in components }}

		/// <summary>
		{{ include 'NestedComponentTemplate_Desc' component }}
		/// </summary>
		{{- if component.by.segments == null }}
		public {{ if component.is_plural }}{{get_component_return_full_type component}}List{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
		{
			get
			{
				{{ if component.is_plural }}
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}
				
				var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
				var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
				var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
				var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, _elementHandler, elementLocator, by, listMetadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

				var webElements = new {{get_component_return_full_type component}}List(Page, this, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
				return webElements;
				{{ else }}
				if (_elementHandler.ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
				{
					var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
					return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(Page, this, WebDriver, cachedElementHandler, metadata, SpaceOptions);
				}
				else
				{
					var byValue = "{{ escape component.by.value }}";

					{{ include 'ByTemplate' component }}
					
					var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
					var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();
					var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);

					_elementHandler.ElementHandlerRepository.Set("{{component.name}}", elementHandler);

					return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(Page, this, WebDriver, elementHandler, metadata, SpaceOptions);
				}
				{{- end }}
			}
		}
		{{ else }}
		public {{ if component.is_plural }}{{get_component_return_full_type component}}List{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
		{
			var segments = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, string>>() { 
					{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new global::System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
				};

			var byValue = new global::Yapoml.Selenium.Services.SegmentService().Replace("{{ escape component.by.value }}", segments);

			{{ include 'ByTemplate' component }}
			
			var elementLocator = SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Locator.IElementLocator>();

			{{- if component.is_plural }}
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Selenium.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementsListHandler = new global::Yapoml.Selenium.Services.Locator.ElementsListHandler(WebDriver, _elementHandler, elementLocator, by, listMetadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
			var webElements = new {{get_component_return_full_type component}}List(Page, this, WebDriver, elementsListHandler, listMetadata, EventSource, SpaceOptions);
			return webElements;
			{{ else }}
			var metadata = new global::Yapoml.Selenium.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
			var elementHandler = new global::Yapoml.Selenium.Services.Locator.ElementHandler(WebDriver, _elementHandler, elementLocator, by, metadata, _elementHandler.ElementHandlerRepository.CreateNestedRepository(), EventSource);
			return SpaceOptions.Services.Get<global::Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}, {{get_component_return_type component}}.Conditions>(Page, this, WebDriver, elementHandler, metadata, SpaceOptions);
			{{- end }}
		}
		{{ end }}


		{{ include 'NestedComponentTemplate' component }}

		{{ end }}

		
	}
}
# pragma warning restore