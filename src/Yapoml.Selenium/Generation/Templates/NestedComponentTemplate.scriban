public partial class {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component : {{if $1.base_component}} {{$1.base_component.namespace}}.{{$1.base_component.name}}Component {{else}} {{workspace.root_namespace}}.Component {{end}}
{
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component(OpenQA.Selenium.IWebDriver webDriver, OpenQA.Selenium.IWebElement webElement, Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(webDriver, webElement, spaceOptions)
	{

	}

	{{- for component in $1.components }}

	/// <summary>
	{{ include 'NestedComponentTemplate_Desc' component }}
	/// </summary>
	{{- if component.by.segments == null }}
	public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
	{
		get
		{
			{{ if component.by.method == 'XPath' -}}
			var by = OpenQA.Selenium.By.XPath("{{ component.by.value }}");
			{{ end -}}

			{{ if component.by.method == 'Css' -}}
			var by = OpenQA.Selenium.By.CssSelector("{{ component.by.value }}");
			{{ end -}}

			{{ if component.by.method == 'Id' -}}
			var by = OpenQA.Selenium.By.Id("{{ component.by.value }}");
			{{ end -}}

			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = OpenQA.Selenium.By.XPath("{{ component.by.value }}");
			{{ else }}
			var by = OpenQA.Selenium.By.CssSelector("{{ component.by.value }}");
			{{ end -}}
			{{ end -}}
		
			{{- if component.is_plural }}
			EventSource.RaiseOnFindingComponents("{{component.name}}", by);
			var webElements = SpaceOptions.Services.Get<Yapoml.Selenium.Services.Locator.IElementLocator>().FindElements(WrappedElement, by);
			EventSource.RaiseOnFoundComponents(by, webElements);
			return webElements.Select(e => SpaceOptions.Services.Get<Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, e, SpaceOptions)).ToList();
			{{ else }}
			EventSource.RaiseOnFindingComponent("{{component.name}}", by);
			var webElement = SpaceOptions.Services.Get<Yapoml.Selenium.Services.Locator.IElementLocator>().FindElement("{{ component.name }}", WrappedElement, by);
			EventSource.RaiseOnFoundComponent(by, WebDriver, webElement);
			return SpaceOptions.Services.Get<Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, webElement, SpaceOptions);
			{{- end }}
		}
	}
	{{ else }}
	public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
	{
		var segments = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

		var byValue = new Yapoml.Selenium.Services.SegmentService().Replace("{{ component.by.value }}", segments);

		{{ if component.by.method == 'XPath' -}}
		var by = OpenQA.Selenium.By.XPath(byValue);
		{{ end -}}

		{{ if component.by.method == 'Css' -}}
		var by = OpenQA.Selenium.By.CssSelector(byValue);
		{{ end -}}

		{{ if component.by.method == 'Id' -}}
		var by = OpenQA.Selenium.By.Id(byValue);
		{{ end -}}

		{{ if component.by.method == 'None' -}}
		{{ if is_xpath component.by.value }}
		var by = OpenQA.Selenium.By.XPath(byValue);
		{{ else }}
		var by = OpenQA.Selenium.By.CssSelector(byValue);
		{{ end -}}
		{{ end -}}
		
		{{- if component.is_plural }}
		EventSource.RaiseOnFindingComponents("{{component.name}}", by);
		var webElements = SpaceOptions.Services.Get<Yapoml.Selenium.Services.Locator.IElementLocator>().FindElements(WrappedElement, by);
		EventSource.RaiseOnFoundComponents(by, webElements);
		return webElements.Select(e => SpaceOptions.Services.Get<Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, e, SpaceOptions)).ToList();
		{{ else }}
		EventSource.RaiseOnFindingComponent("{{component.name}}", by);
		var webElement = SpaceOptions.Services.Get<Yapoml.Selenium.Services.Locator.IElementLocator>().FindElement("{{ component.name }}", WrappedElement, by);
		EventSource.RaiseOnFoundComponent(by, WebDriver, webElement);
		return SpaceOptions.Services.Get<Yapoml.Selenium.Services.Factory.IComponentFactory>().Create<{{get_component_return_type component}}>(WebDriver, webElement, SpaceOptions);
		{{- end }}
	}
	{{ end }}

	{{- if component.referenced_component == null }}
	{{ include 'NestedComponentTemplate' component }}
	{{ end }}
	{{ end }}

	/// <summary>
	/// Waits until <c>{{ $1.name }}</c> is displayed.
	/// </summary>
	/// <param name="timeout">How long to wait until {{ $1.name }} component is displayed.</param>
	/// <param name="pollingInterval">Interval between verifications in a loop.</param>
	/// <returns></returns>
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component WaitDisplayed(System.TimeSpan? timeout = null, System.TimeSpan? pollingInterval = null)
	{
		var timeoutOptions = SpaceOptions.Services.Get<Yapoml.Selenium.Options.TimeoutOptions>();

		Yapoml.Selenium.Services.Waiter.UntilDisplayed("{{ $1.name }}", WrappedElement, timeout ?? timeoutOptions.Timeout, pollingInterval ?? timeoutOptions.PollingInterval);

		return this;
	}

	/// <summary>
	/// Waits until <c>{{ $1.name }}</c> is displayed.
	/// </summary>
	/// <param name="timeout">How long to wait until {{ $1.name }} component is enabled.</param>
	/// <param name="pollingInterval">Interval between verifications in a loop.</param>
	/// <returns></returns>
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component WaitEnabled(System.TimeSpan? timeout = null, System.TimeSpan? pollingInterval = null)
	{
		var timeoutOptions = SpaceOptions.Services.Get<Yapoml.Selenium.Options.TimeoutOptions>();

		Yapoml.Selenium.Services.Waiter.UntilEnabled("{{ $1.name }}", WrappedElement, timeout ?? timeoutOptions.Timeout, pollingInterval ?? timeoutOptions.PollingInterval);

		return this;
	}

	/// <summary>
	/// Waits specific CSS value.
	/// </summary>
	/// <param name="propertyName">CSS property name.</param>
	/// <param name="expectedValue">Expected value of the CSS property.</param>
	/// <param name="timeout">How long to wait until CSS value becomes expected.</param>
	/// <param name="pollingInterval">Interval between verifications in a loop.</param>
	/// <returns></returns>
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component WaitCssValue(string propertyName, string expectedValue, System.TimeSpan? timeout = null, System.TimeSpan? pollingInterval = null)
	{
		var timeoutOptions = SpaceOptions.Services.Get<Yapoml.Selenium.Options.TimeoutOptions>();

		Yapoml.Selenium.Services.Waiter.UntilCssValue(propertyName, expectedValue, "{{ $1.name }}", WrappedElement, timeout ?? timeoutOptions.Timeout, pollingInterval ?? timeoutOptions.PollingInterval);

		return this;
	}

	/// <summary>
	/// Waits specific attribute value.
	/// </summary>
	/// <param name="attributeName">Attribute name.</param>
	/// <param name="expectedValue">Expected value of the attribute.</param>
	/// <param name="timeout">How long to wait until attribute value becomes expected.</param>
	/// <param name="pollingInterval">Interval between verifications in a loop.</param>
	/// <returns></returns>
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component WaitAttributeValue(string attributeName, string expectedValue, System.TimeSpan? timeout = null, System.TimeSpan? pollingInterval = null)
	{
		var timeoutOptions = SpaceOptions.Services.Get<Yapoml.Selenium.Options.TimeoutOptions>();

		Yapoml.Selenium.Services.Waiter.UntilAttributeValue(attributeName, expectedValue, "{{ $1.name }}", WrappedElement, timeout ?? timeoutOptions.Timeout, pollingInterval ?? timeoutOptions.PollingInterval);

		return this;
	}

	{{- if (array.size $1.components) > 0 }}
	{{ include 'WaiterTemplate' $1 "WrappedElement"}}
	{{ end }}
}